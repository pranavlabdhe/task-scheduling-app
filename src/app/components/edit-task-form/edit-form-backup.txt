<div class="task_form">
  <div class="child_1">
    <!-- <h3 class="add_task_title">Add Task</h3> -->
  </div>
  <form [formGroup]="taskForm" (ngSubmit)="onSubmit(formDirective)" #formDirective="ngForm">
    <div class="task_form">
      <div class="child_1">
        <h3 class="add_task_title">Add Task</h3>
      </div>
      <div class="child_2 one_field_parent">
        <div class="form_div">
          <div>
            <mat-form-field class="one_field">
              <input matInput formControlName="taskName" placeholder="Task Name" required>
            </mat-form-field>
          </div>
          <div>
            <mat-form-field class="margin_left one_field" >
              <mat-select formControlName="frequency" placeholder="Frequency">
                <mat-option value="hourly">Hourly</mat-option>
                <mat-option value="daily">Daily</mat-option>
                <mat-option value="weekly" (click)="openWeeklyDialog()">Weekly</mat-option>
              </mat-select>
            </mat-form-field>
          </div>
        </div>
      </div>
      <div class="child_2_child"  class="one_field_parent">
        <div *ngIf="taskForm.get('frequency')?.value === 'hourly'" class="one_field">
          <mat-form-field appearance="fill" class="one_field">
            <mat-label>Choose start date</mat-label>
            <input matInput formControlName="startDate" [matDatepicker]="picker">
            <mat-hint>DD/MM/YYYY</mat-hint>
            <mat-datepicker-toggle matIconSuffix [for]="picker"></mat-datepicker-toggle>
            <mat-datepicker #picker></mat-datepicker>
          </mat-form-field>
        </div>
        <div *ngIf="taskForm.get('frequency')?.value === 'daily'" class="one_field">
          <mat-form-field appearance="fill" class="one_field">
            <mat-label>Choose start date</mat-label>
            <input matInput formControlName="startDate" [matDatepicker]="picker">
            <mat-hint>MM/DD/YYYY</mat-hint>
            <mat-datepicker-toggle matIconSuffix [for]="picker"></mat-datepicker-toggle>
            <mat-datepicker #picker></mat-datepicker>
          </mat-form-field>
        </div>
        <div *ngIf="taskForm.get('frequency')?.value === 'weekly'">
          <div *ngIf="selectedWeeklyData">
            <p>Option: {{ selectedWeeklyData.option }}</p>
            <p>Start Date: {{ formatDateString(selectedWeeklyData.startDate) }}</p>
            <ng-container *ngIf="selectedWeeklyData.endDate">
              <p>End Date: {{ formatDateString(selectedWeeklyData.endDate) }}</p>
            </ng-container>
            <ng-container *ngIf="selectedWeeklyData.daysOfWeek && selectedWeeklyData.daysOfWeek.length > 0">
              <p>Days of Week: {{ selectedWeeklyData.daysOfWeek.join(', ') }}</p>
            </ng-container>
          </div>
        </div>
      </div>
      <div class="one_field_parent">
        <div class="time_field one_field">
          <mat-form-field class="one_field">
            <input matInput formControlName="startTime" placeholder="Choose Start Time" [ngxTimepicker]="picker3" required>
            <ngx-material-timepicker #picker3></ngx-material-timepicker>
          </mat-form-field>
        </div>
        <div class="time_field one_field">
          <mat-form-field class="one_field">
            <input matInput formControlName="endTime" placeholder="Choose End Time" [ngxTimepicker]="picker4" required>
            <ngx-material-timepicker #picker4></ngx-material-timepicker>
          </mat-form-field>
        </div>
      </div>
      <div class="one_field_parent">
        <mat-form-field class="margin_left one_field" >
          <mat-select formControlName="status" placeholder="Status">
            <mat-option value="todo">Todo</mat-option>
            <mat-option value="in-progress">In-Progress</mat-option>
          </mat-select>
        </mat-form-field>
      </div>
      <div class="one_field_parent">
      <div class="editor_field one_field">
        <angular-editor formControlName="description" [config]="editorConfig"></angular-editor>
      </div>
    </div>
      <div class="margin_top">
        <button mat-raised-button class="add-task-button" color="primary" type="submit">Add</button>
      </div>
    </div>
  </form>
  
  </div>
 
  <p>should appear when edit icon is clicked</p>
  <!-- <div class="child_3">
    <div class="child_3_inner">
      <mat-expansion-panel (opened)="panelOpenState = true"
      (closed)="panelOpenState = false">
<mat-expansion-panel-header>
<mat-panel-title>
Details
</mat-panel-title>
</mat-expansion-panel-header>
<div class="details_parent">
  <div>
    <span class="details">Task Name</span> : <span>Coding</span>
  </div>
  <div>
    <span class="details">Frequency</span> : <span>Daily</span>
  </div>
  <div>
    <span class="details">Start Date</span> : <span>00/00/0000</span>
  </div>
  <div>
    <span class="details">End Date</span> : <span>00/00/0000</span>
  </div>
  <div>
    <span class="details">Start Time</span> : <span>10:10 am</span>
  </div>
  <div>
    <span class="details">End Time</span> : <span>11:10 am</span>
  </div>
  <div>
    <span class="details">Description</span> : <span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Harum, explicabo?</span>
  </div>
</div>



</mat-expansion-panel>
    </div>

  </div> -->

<div class="child_3">
<app-task-detail></app-task-detail>
</div>




 ngOnInit(): void {
    const taskId = this.route.snapshot.paramMap.get('id');
    console.log('Task ID in edit:', taskId);
  
    const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');
    const task = tasks.find((t: any) => t.id === taskId);
  
    if (task) {
      this.taskId = task.id; // Set the task ID for future use
      this.taskForm.patchValue({
        taskName: task.taskName || '',
        frequency: task.frequency || 'hourly',
        startDate: task.startDate || null,
        endDate: task.endDate || null,
        daysOfWeek: task.daysOfWeek || [],
        startTime: task.startTime || '',
        endTime: task.endTime || '',
        status: task.status || null,
        description: task.description || ''
      });
    }
  }













  import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { DatePipe } from '@angular/common';
import { CommonServiceService } from 'src/app/Services/common-service.service';
import { AngularEditorConfig } from '@kolkov/angular-editor';
import { FormGroupDirective } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { WeeklyDialogComponent } from 'src/app/dialogs/weekly-dialog/weekly-dialog.component';

@Component({
  selector: 'app-edit-task-form',
  templateUrl: './edit-task-form.component.html',
  styleUrls: ['./edit-task-form.component.scss']
})
export class EditTaskFormComponent implements OnInit {
  taskForm: FormGroup;
  selectedWeeklyData: any;
  taskId!: string;

  constructor(
    private formBuilder: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private datePipe: DatePipe,
    private service: CommonServiceService,
    private dialog: MatDialog
  ) {
    this.taskForm = this.formBuilder.group({
      taskName: ['', Validators.required],
      frequency: ['hourly'],
      startDate: null,
      endDate: [null],
      daysOfWeek: [[]],
      startTime: ['', Validators.required],
      endTime: ['', Validators.required],
      status: null,
      selectedWeeklyData: [null],
      description: ['']
    });
  }

  editorConfig: AngularEditorConfig = {
    editable: true,
    spellcheck: true,
    height: 'auto',
    minHeight: '0',
    maxHeight: 'auto',
    width: 'auto',
    minWidth: '0',
    translate: 'yes',
    enableToolbar: false,
    showToolbar: true,
    placeholder: 'Enter text here...',
    defaultParagraphSeparator: '',
    defaultFontName: '',
    defaultFontSize: '',
    customClasses: [
      {
        name: 'quote',
        class: 'quote',
      },
      {
        name: 'redText',
        class: 'redText'
      },
      {
        name: 'titleText',
        class: 'titleText',
        tag: 'h1',
      },
    ],
    uploadUrl: 'v1/image',
    uploadWithCredentials: false,
    sanitize: true,
    toolbarPosition: 'top',
    toolbarHiddenButtons: [
      ['bold', 'italic'],
      ['fontSize', 'insertImage',
        'insertVideo', 'link',
        'unlink',
        'insertImage',
        'insertVideo',
        'insertHorizontalRule',
        'removeFormat', 'customClasses', 'toggleEditorMode']
    ],
  };

  openWeeklyDialog(): void {
    const dialogRef = this.dialog.open(WeeklyDialogComponent, {
      width: '416px'
    });
    dialogRef.componentInstance.dialogClosed.subscribe(result => {
      if (result) {
        if (result.startDate && (result.option === 'never' || (result.option === 'ends' && result.endDate && result.daysOfWeek && result.daysOfWeek.length > 0))) {
          this.selectedWeeklyData = result;
          this.taskForm.patchValue({ selectedWeeklyData: result }); // to Update selectedWeeklyData in the form
        } else {
          alert('Please fill all details in the Weekly dialog');
        }
      }
    });
  }

  formatDateString(date: any): string {
    return this.datePipe.transform(date, 'dd/MM/yyyy')!;
  }

  ngOnInit(): void {
    const taskId = this.route.snapshot.paramMap.get('id');
    console.log('Task ID in edit:', taskId);
  
    const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');
    const task = tasks.find((t: any) => t.id === taskId);
  
    if (task) {
      this.taskId = task.id; // Set the task ID for future use
      this.taskForm.patchValue({
        taskName: task.taskName || '',
        frequency: task.frequency || 'hourly',
        startDate: task.startDate || null,
        endDate: task.endDate || null,
        daysOfWeek: task.daysOfWeek || [],
        startTime: task.startTime || '',
        endTime: task.endTime || '',
        status: task.status || null,
        description: task.description || ''
      });
    }
  }
  

  onSubmit(formDirective: FormGroupDirective): void {
    if (this.taskForm.valid) {
      let tasks = JSON.parse(localStorage.getItem('tasks') || '[]');

      tasks = tasks.map((task: any) => {
        if (task.id === this.taskId) {
          const updatedTask = { id: task.id, ...this.taskForm.value };
          if (task.frequency === 'weekly') {
            const daysOfWeek = updatedTask.selectedWeeklyData.daysOfWeek.map((day: string) => {
              return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].indexOf(day);
            });

            const endDate = new Date(updatedTask.selectedWeeklyData.endDate);
            endDate.setDate(endDate.getDate() + 1); // Include the last day

            const updatedEvent = {
              id: task.id,
              title: `${updatedTask.taskName} ${updatedTask.startTime}-${updatedTask.endTime}`,
              daysOfWeek: daysOfWeek,
              startRecur: updatedTask.selectedWeeklyData.startDate,
              endRecur: endDate.toISOString().split('T')[0] // Convert to 'YYYY-MM-DD' format
            };

            // Remove the existing event from the calendar
            // Assuming you have a service to handle calendar operations
            this.service.removeCalendarEvent(task.id);

            // Add the updated event to the calendar
            this.service.addCalendarEvent(updatedEvent);
          }
          return updatedTask;
        }
        return task;
      });

      localStorage.setItem('tasks', JSON.stringify(tasks));

      console.log('Tasks:', tasks);

      this.taskForm.reset();
      this.service.announceTaskAdded();
      this.router.navigate(['/main-view/tasks']);
    } else {
      alert('Kindly fill valid details');
      this.taskForm.markAllAsTouched();
    }
  }
  
}






<!-- <div class="task_form">
    <form [formGroup]="taskForm" (ngSubmit)="onSubmit(formDirective)" #formDirective="ngForm">
      <div class="task_form">
        <div class="child_1">
          <h3 class="add_task_title">Edit Task</h3>
        </div>
        <div class="child_2 one_field_parent">
          <div class="form_div">
            <div>
              <mat-form-field class="one_field">
                <input matInput formControlName="taskName" placeholder="Task Name" required>
              </mat-form-field>
            </div>
            <div>
              <mat-form-field class="margin_left one_field" >
                <mat-select formControlName="frequency" placeholder="Frequency">
                  <mat-option value="hourly">Hourly</mat-option>
                  <mat-option value="daily">Daily</mat-option>
                  <mat-option value="weekly" (click)="openWeeklyDialog()">Weekly</mat-option>
                </mat-select>
              </mat-form-field>
            </div>
          </div>
        </div>
        <div class="child_2_child"  class="one_field_parent">
          <div *ngIf="taskForm.get('frequency')?.value === 'hourly'" class="one_field">
            <mat-form-field appearance="fill" class="one_field">
              <mat-label>Choose start date</mat-label>
              <input matInput formControlName="startDate" [matDatepicker]="picker">
              <mat-hint>DD/MM/YYYY</mat-hint>
              <mat-datepicker-toggle matIconSuffix [for]="picker"></mat-datepicker-toggle>
              <mat-datepicker #picker></mat-datepicker>
            </mat-form-field>
          </div>
          <div *ngIf="taskForm.get('frequency')?.value === 'daily'" class="one_field">
            <mat-form-field appearance="fill" class="one_field">
              <mat-label>Choose start date</mat-label>
              <input matInput formControlName="startDate" [matDatepicker]="picker">
              <mat-hint>MM/DD/YYYY</mat-hint>
              <mat-datepicker-toggle matIconSuffix [for]="picker"></mat-datepicker-toggle>
              <mat-datepicker #picker></mat-datepicker>
            </mat-form-field>
          </div>
          <div *ngIf="taskForm.get('frequency')?.value === 'weekly' && selectedWeeklyData" >
            <div *ngIf="selectedWeeklyData">
              <p>Option: {{ selectedWeeklyData.option }}</p>
              <p>Start Date: {{ formatDateString(selectedWeeklyData.startDate) }}</p>
              <ng-container *ngIf="selectedWeeklyData.endDate">
                <p>End Date: {{ formatDateString(selectedWeeklyData.endDate) }}</p>
              </ng-container>
              <ng-container *ngIf="selectedWeeklyData.daysOfWeek && selectedWeeklyData.daysOfWeek.length > 0">
                <p>Days of Week: {{ selectedWeeklyData.daysOfWeek.join(', ') }}</p>
              </ng-container>
            </div>
          </div>
        </div>
        <div class="one_field_parent">
          <div class="time_field one_field">
            <mat-form-field class="one_field">
              <input matInput formControlName="startTime" placeholder="Choose Start Time" [ngxTimepicker]="picker3" required>
              <ngx-material-timepicker #picker3></ngx-material-timepicker>
            </mat-form-field>
          </div>
          <div class="time_field one_field">
            <mat-form-field class="one_field">
              <input matInput formControlName="endTime" placeholder="Choose End Time" [ngxTimepicker]="picker4" required>
              <ngx-material-timepicker #picker4></ngx-material-timepicker>
            </mat-form-field>
          </div>
        </div>
        <div class="one_field_parent">
          <mat-form-field class="margin_left one_field" >
            <mat-select formControlName="status" placeholder="Status">
              <mat-option value="todo">Todo</mat-option>
              <mat-option value="in-progress">In-Progress</mat-option>
            </mat-select>
          </mat-form-field>
        </div>
        <div class="one_field_parent">
          <div class="editor_field one_field">
            <angular-editor formControlName="description" [config]="editorConfig"></angular-editor>
          </div>
        </div>
        <div class="margin_top">
          <button mat-raised-button class="add-task-button" color="primary" type="submit">Save</button>
        </div>
      </div>
    </form>
  </div>
  <div class="child_3">
    <app-task-detail></app-task-detail>
  </div>




   -->