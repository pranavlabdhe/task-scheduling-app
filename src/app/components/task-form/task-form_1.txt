EXTRACTED THE CODE OUT OF WORKING CODE.


// import { Component } from '@angular/core';
// import { WeeklyDialogComponent } from 'src/app/dialogs/weekly-dialog/weekly-dialog.component';
// import { MatDialog } from '@angular/material/dialog';
// import { FormBuilder, FormGroup, Validators } from '@angular/forms'; // Import necessary modules
// import { DatePipe } from '@angular/common';
// import { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';
// import { AngularEditorConfig } from '@kolkov/angular-editor';
// import { FormGroupDirective } from '@angular/forms';
// import { CommonServiceService } from 'src/app/Services/common-service.service';
// import { Router } from '@angular/router';
// import { ActivatedRoute } from '@angular/router';

// export const MY_FORMATS = {
//   parse: {
//     dateInput: 'MM/DD/YYYY',
//   },
//   display: {
//     dateInput: 'DD/MM/YYYY',
//     monthYearLabel: 'MM/YYYY',
//     dateA11yLabel: 'LL',
//     monthYearA11yLabel: 'MMMM YYYY',
//   },
// };

// @Component({
//   selector: 'app-task-form',
//   templateUrl: './task-form.component.html',
//   styleUrls: ['./task-form.component.scss']
// })

// export class TaskFormComponent {
//   panelOpenState = false;
//   taskForm: FormGroup;
//   selectedWeeklyData: any;
//   weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

//   constructor(private formBuilder: FormBuilder, private dialog: MatDialog, private datePipe: DatePipe, private dateAdapter: DateAdapter<Date>, private formGroupDirective: FormGroupDirective, private service: CommonServiceService, private router: Router, private route: ActivatedRoute) {
//     this.taskForm = this.formBuilder.group({
//       taskName: ['', Validators.required],
//       frequency: ['hourly'],
//       startDate: null,
//       endDate: [null],
//       daysOfWeek: [[]],
//       startTime: ['', Validators.required],
//       endTime: ['', Validators.required],
//       status: null,
//       selectedWeeklyData: [null],
//       description: ['']
//     });
//     this.dateAdapter.setLocale('en-IN');
//   }

//   editorConfig: AngularEditorConfig = {
//     editable: true,
//     spellcheck: true,
//     height: 'auto',
//     minHeight: '0',
//     maxHeight: 'auto',
//     width: 'auto',
//     minWidth: '0',
//     translate: 'yes',
//     enableToolbar: false,
//     showToolbar: true,
//     placeholder: 'Enter text here...',
//     defaultParagraphSeparator: '',
//     defaultFontName: '',
//     defaultFontSize: '',
//     customClasses: [
//       {
//         name: 'quote',
//         class: 'quote',
//       },
//       {
//         name: 'redText',
//         class: 'redText'
//       },
//       {
//         name: 'titleText',
//         class: 'titleText',
//         tag: 'h1',
//       },
//     ],
//     uploadUrl: 'v1/image',
//     uploadWithCredentials: false,
//     sanitize: true,
//     toolbarPosition: 'top',
//     toolbarHiddenButtons: [
//       ['bold', 'italic'],
//       ['fontSize', 'insertImage',
//         'insertVideo', 'link',
//         'unlink',
//         'insertImage',
//         'insertVideo',
//         'insertHorizontalRule',
//         'removeFormat', 'customClasses', 'toggleEditorMode']
//     ],
//   };

//   ngOnInit() {
//     this.dateAdapter.setLocale('en-IN');
//     this.route.params.subscribe(params => {
//       const task = history.state.task;
//       if (task) {
//         // Populate the task form with the task details
//         this.taskForm.patchValue({
//           taskName: task.taskName || '',
//           frequency: task.frequency || 'hourly',
//           startDate: task.startDate || null,
//           endDate: task.endDate || null,
//           daysOfWeek: task.daysOfWeek || [],
//           startTime: task.startTime || '',
//           endTime: task.endTime || '',
//           status: task.status || null,
//           description: task.description || ''
//         });
//       }
//     });
//   }

//   openWeeklyDialog(): void {
//     const dialogRef = this.dialog.open(WeeklyDialogComponent, {
//       width: '416px'
//     });
//     dialogRef.componentInstance.dialogClosed.subscribe(result => {
//       if (result) {
//         if (result.startDate && (result.option === 'never' || (result.option === 'ends' && result.endDate && result.daysOfWeek && result.daysOfWeek.length > 0))) {
//           this.selectedWeeklyData = result;
//           this.taskForm.patchValue({ selectedWeeklyData: result }); // to Update selectedWeeklyData in the form
//         } else {
//           alert('Please fill all details in the Weekly dialog');
//         }
//       }
//     });
//   }

//   formatDateString(date: any): string {
//     return this.datePipe.transform(date, 'dd/MM/yyyy')!;
//   }

//   // onSubmit(formDirective: FormGroupDirective) {
//   //   if (this.taskForm.valid) {
//   //     // Generate a unique ID for the task
//   //     const taskId = Math.random().toString(36).substr(2, 9);

//   //     // Get the current tasks array from localStorage or initialize an empty array
//   //     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');

//   //     // Add the unique ID to the task before pushing it to the tasks array
//   //     const newTask = { id: taskId, ...this.taskForm.value };
//   //     tasks.push(newTask);

//   //     // Save the updated tasks array back to localStorage
//   //     localStorage.setItem('tasks', JSON.stringify(tasks));

//   //     console.log('Task added:', newTask);

//   //     // Reset the form
//   //     formDirective.resetForm();
//   //     this.service.announceTaskAdded();
//   //     this.router.navigate(['/main-view/tasks']);
//   //   } else {
//   //     alert('Kindly fill valid details');
//   //     this.taskForm.markAllAsTouched();
//   //   }
//   // }


//   onSubmit(formDirective: FormGroupDirective) {
//     if (this.taskForm.valid) {
//       let tasks = JSON.parse(localStorage.getItem('tasks') || '[]');
  
//       // Check if there's an existing task being edited
//       const taskId = this.route.snapshot.paramMap.get('id');
//       console.log('taskID from route parameter',taskId)
//       if (taskId) {
//         // Update existing task
//         tasks = tasks.map((task: any) => {
//           if (task.id === taskId) {
//             return { id: task.id, ...this.taskForm.value };
//           }
//           return task;
//         });
//       } else {
//         // Generate a unique ID for the new task
//         const newTaskId = Math.random().toString(36).substr(2, 9);
//         tasks.push({ id: newTaskId, ...this.taskForm.value });
//       }
  
//       // Save the updated tasks array back to localStorage
//       localStorage.setItem('tasks', JSON.stringify(tasks));
  
//       console.log('Tasks:', tasks);
  
//       // Reset the form
//       formDirective.resetForm();
//       this.service.announceTaskAdded();
//       this.router.navigate(['/main-view/tasks']);
//     } else {
//       alert('Kindly fill valid details');
//       this.taskForm.markAllAsTouched();
//     }
//   }
  
// }



