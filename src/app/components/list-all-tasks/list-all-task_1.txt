EXTRACTED THE CODE OUT OF WORKING CODE.


// import { Component, OnInit, ViewChild } from '@angular/core';
// import { FullCalendarComponent } from '@fullcalendar/angular';
// import { CalendarOptions } from '@fullcalendar/core';
// import dayGridPlugin from '@fullcalendar/daygrid';
// import { TaskdetailsdialogcomponentComponent } from 'src/app/dialogs/taskdetailsdialogcomponent/taskdetailsdialogcomponent.component';
// import { MatDialog } from '@angular/material/dialog';
// import { Router } from '@angular/router';
// import { CommonServiceService } from 'src/app/Services/common-service.service';

// @Component({
//   selector: 'app-list-all-tasks',
//   templateUrl: './list-all-tasks.component.html',
//   styleUrls: ['./list-all-tasks.component.scss']
// })
// export class ListAllTasksComponent implements OnInit {
//   @ViewChild('fullcalendar') fullcalendar!: FullCalendarComponent;
//   calendarOptions: CalendarOptions = {
//     events: []
//   };

//   constructor(private dialog: MatDialog, private router: Router, private service: CommonServiceService) { }

//   ngOnInit() {
//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');

//     // Map tasks to FullCalendar events format
//     const events = tasks.flatMap((task: any) => {
//       if (task.frequency === 'hourly') {
//         const timeRange = `${task.startTime}-${task.endTime}`;
//         return [{
//           id: task.id, // Set the ID field
//           title: `${task.taskName} ${timeRange}`,
//           start: task.startDate,
//           end: task.endDate,
//           description: task.description,
//           extendedProps: {
//             status: task.status
//           }
//         }];
//       } else if (task.frequency === 'weekly' && task.selectedWeeklyData) {
//         const daysOfWeek = task.selectedWeeklyData.daysOfWeek.map((day: string) => {
//           return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].indexOf(day);
//         });

//         return [{
//           id: task.id, // Set the ID field
//           title: `${task.taskName} ${task.startTime}-${task.endTime}`,
//           daysOfWeek: daysOfWeek,
//           startRecur: task.selectedWeeklyData.startDate,
//           endRecur: task.selectedWeeklyData.endDate,
//           description: task.description,
//           extendedProps: {
//             status: task.status
//           }
//         }]; 
//       } else if (task.frequency === 'daily') {
//         const recurringEvents = [];
//         let currentDate = new Date(task.startDate);
//         currentDate.setHours(0, 0, 0, 0); // Start from the beginning of the day in local time

//         const endDate = new Date(); // Get current date
//         endDate.setDate(endDate.getDate() + 1460); // Limit to 1460 days (4 years) into the future

//         while (currentDate <= endDate) {
//           recurringEvents.push({
//             id: task.id, // Set the ID field
//             title: `${task.taskName} ${task.startTime}-${task.endTime}`,
//             start: currentDate.toISOString().split('T')[0], // Start date in 'YYYY-MM-DD' format
//             end: currentDate.toISOString().split('T')[0], // End date in 'YYYY-MM-DD' format
//             description: task.description,
//             extendedProps: {
//               status: task.status
//             }
//           });
//           currentDate.setDate(currentDate.getDate() + 1); // Move to the next day
//         }

//         return recurringEvents;
//       } else {
//         return [];
//       }
//     });

//     this.calendarOptions = {
//       plugins: [dayGridPlugin],
//       initialView: 'dayGridMonth',
//       events: events,
//       eventContent: this.customizeEventContent, // Custom event content callback
//       eventDidMount: this.customizeEventRender, // Custom event rendering callback
//       eventClick: this.onEventClick.bind(this)
//     };

//     this.service.taskDeleted$.subscribe((taskId: string) => {
//       // Update the calendar events when a task is deleted
//       if (this.calendarOptions.events) {
//         const filteredEvents = (this.calendarOptions.events as any[]).filter((event: any) => event.id !== taskId);
//         this.calendarOptions.events = filteredEvents as any; // Assign the filtered events back
//         if (this.fullcalendar) {
//           this.fullcalendar.getApi()?.removeAllEvents();
//           filteredEvents.forEach((event) => {
//             this.fullcalendar.getApi()?.addEvent(event);
//           });
//           this.fullcalendar.getApi()?.render();
//         }
//       }
//     });
//   }

//   // Custom event content callback
//   customizeEventContent(arg: any) {
//     const eventEl = document.createElement('div');
//     eventEl.innerHTML = arg.event.title;
//     eventEl.style.fontSize = '10px'; // Adjust the font size as needed
//     eventEl.style.color = 'white';
//     eventEl.style.backgroundColor = '#318CE7';
//     eventEl.style.width = '100%';


//     return { domNodes: [eventEl] };
//   }

//   // Custom event rendering callback
//   customizeEventRender(info: any) {
//     const status = info.event.extendedProps.status;
//     if (status === 'null' || status === 'todo' || status === 'in-progress') {
//       info.el.style.backgroundColor = '#318CE7'; // Set background color
//     }
//   }

//   onEventClick(event: any) {
//     const taskId = event.event.id; // Assuming you're setting the ID in the event object
//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');
//     const task = tasks.find((t: any) => t.id === taskId);

//     if (task) {
//       const dialogRef = this.dialog.open(TaskdetailsdialogcomponentComponent, {
//         data: {
//           task: {
//             ...task,
//             extendedProps: {
//               ...task.extendedProps,
//               // Add the ID to the extendedProps
//             }
//           }
//         }
//       });

//       dialogRef.afterClosed().subscribe((result) => {
//         if (result && result.action === 'edit') {
//           this.router.navigate([`/main-view/edit-task/${task.id}`], { state: { task: result.task } });
//         }
//       });
//     } else {
//       console.error('Task not found for ID:', taskId);
//     }
//   }

// }










// import { Component, OnInit, ViewChild } from '@angular/core';
// import { FullCalendarComponent } from '@fullcalendar/angular';
// import { CalendarOptions } from '@fullcalendar/core';
// import dayGridPlugin from '@fullcalendar/daygrid';
// import { TaskdetailsdialogcomponentComponent } from 'src/app/dialogs/taskdetailsdialogcomponent/taskdetailsdialogcomponent.component';
// import { MatDialog } from '@angular/material/dialog';
// import { Router } from '@angular/router';
// import { CommonServiceService } from 'src/app/Services/common-service.service';

// @Component({
//   selector: 'app-list-all-tasks',
//   templateUrl: './list-all-tasks.component.html',
//   styleUrls: ['./list-all-tasks.component.scss']
// })
// export class ListAllTasksComponent implements OnInit {
//   @ViewChild('fullcalendar') fullcalendar!: FullCalendarComponent;
//   calendarOptions: CalendarOptions = {
//     events: []
//   };

//   constructor(private dialog: MatDialog, private router: Router, private service: CommonServiceService) { }

//   ngOnInit() {
//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');

//     // Map tasks to FullCalendar events format
//     const events = tasks.flatMap((task: any) => {
//       if (task.frequency === 'hourly') {
//         const timeRange = `${task.startTime}-${task.endTime}`;
//         return [{
//           id: task.id, // Set the ID field
//           title: `${task.taskName} ${timeRange}`,
//           start: task.startDate,
//           end: task.endDate,
//           description: task.description,
//           extendedProps: {
//             status: task.status
//           }
//         }];
//       } else if (task.frequency === 'weekly' && task.selectedWeeklyData) {
//         const daysOfWeek = task.selectedWeeklyData.daysOfWeek.map((day: string) => {
//           return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].indexOf(day);
//         });

//         return [{
//           id: task.id, // Set the ID field
//           title: `${task.taskName} ${task.startTime}-${task.endTime}`,
//           daysOfWeek: daysOfWeek,
//           startRecur: task.selectedWeeklyData.startDate,
//           endRecur: task.selectedWeeklyData.endDate,
//           description: task.description,
//           extendedProps: {
//             status: task.status
//           }
//         }];
//       } else if (task.frequency === 'daily') {
//         const recurringEvents = [];
//         let currentDate = new Date(task.startDate);
//         currentDate.setDate(currentDate.getDate() + 1); // Move to the next day
//         const endDate = new Date(); // Get current date
//         endDate.setDate(endDate.getDate() + 1460); // Limit to 1460 days (4 years) into the future
      
//         while (currentDate <= endDate) {
//           recurringEvents.push({
//             id: task.id, // Set the ID field
//             title: `${task.taskName} ${task.startTime}-${task.endTime}`,
//             start: currentDate.toISOString().split('T')[0], // Start date in 'YYYY-MM-DD' format
//             end: currentDate.toISOString().split('T')[0], // End date in 'YYYY-MM-DD' format
//             description: task.description,
//             extendedProps: {
//               status: task.status
//             }
//           });
//           currentDate.setDate(currentDate.getDate() + 1); // Move to the next day
//         }
      
//         return recurringEvents;
//       } else {
//         return [];
//       }
//     });

//     this.calendarOptions = {
//       plugins: [dayGridPlugin],
//       initialView: 'dayGridMonth',
//       events: events,
//       eventContent: this.customizeEventContent, // Custom event content callback
//       eventDidMount: this.customizeEventRender, // Custom event rendering callback
//       eventClick: this.onEventClick.bind(this)
//     };

//     this.service.taskDeleted$.subscribe((taskId: string) => {
//       // Update the calendar events when a task is deleted
//       if (this.calendarOptions.events) {
//         const filteredEvents = (this.calendarOptions.events as any[]).filter((event: any) => event.id !== taskId);
//         this.calendarOptions.events = filteredEvents as any; // Assign the filtered events back
//         if (this.fullcalendar) {
//           this.fullcalendar.getApi()?.removeAllEvents();
//           filteredEvents.forEach((event) => {
//             this.fullcalendar.getApi()?.addEvent(event);
//           });
//           this.fullcalendar.getApi()?.render();
//         }
//       }
//     });
//   }

//   // Custom event content callback
//   customizeEventContent(arg: any) {
//     const eventEl = document.createElement('div');
//     eventEl.innerHTML = arg.event.title;
//     eventEl.style.fontSize = '10px'; // Adjust the font size as needed
//     eventEl.style.color = 'white';

//     return { domNodes: [eventEl] };
//   }

//   // Custom event rendering callback
//   customizeEventRender(info: any) {
//     const status = info.event.extendedProps.status;
//     if (status === 'null' || status === 'todo' || status === 'in-progress') {
//       info.el.style.backgroundColor = '#318CE7'; // Set background color
//     }
//   }

//   onEventClick(event: any) {
//     const taskId = event.event.id; // Assuming you're setting the ID in the event object
//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');
//     const task = tasks.find((t: any) => t.id === taskId);

//     if (task) {
//       const dialogRef = this.dialog.open(TaskdetailsdialogcomponentComponent, {
//         data: {
//           task: {
//             ...task,
//             extendedProps: {
//               ...task.extendedProps,
//               // Add the ID to the extendedProps
//             }
//           }
//         }
//       });

//       dialogRef.afterClosed().subscribe((result) => {
//         if (result && result.action === 'edit') {
//           this.router.navigate([`/main-view/edit-task/${task.id}`], { state: { task: result.task } });
//         }
//       });
//     } else {
//       console.error('Task not found for ID:', taskId);
//     }
//   }

// }


// import { Component, OnInit, ViewChild } from '@angular/core';
// import { FullCalendarComponent } from '@fullcalendar/angular';
// import { CalendarOptions } from '@fullcalendar/core';
// import dayGridPlugin from '@fullcalendar/daygrid';
// import { TaskdetailsdialogcomponentComponent } from 'src/app/dialogs/taskdetailsdialogcomponent/taskdetailsdialogcomponent.component';
// import { MatDialog } from '@angular/material/dialog';
// import { Router } from '@angular/router';
// import { CommonServiceService } from 'src/app/Services/common-service.service';

// @Component({
//   selector: 'app-list-all-tasks',
//   templateUrl: './list-all-tasks.component.html',
//   styleUrls: ['./list-all-tasks.component.scss']
// })
// export class ListAllTasksComponent implements OnInit {
//   @ViewChild('fullcalendar') fullcalendar!: FullCalendarComponent;
//   calendarOptions: CalendarOptions = {
//     events: []
//   };

//   constructor(private dialog: MatDialog, private router: Router, private service: CommonServiceService) { }


//   loadAllTasks() {
//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');
  
//     // Map tasks to FullCalendar events format
//     const events = tasks.flatMap((task: any) => {
//       // Your existing mapping logic here
//     });
  
//     this.calendarOptions.events = events; // Update the calendar events
//     if (this.fullcalendar) {
//       this.fullcalendar.getApi()?.removeAllEvents();
//       events.forEach((event:any) => {
//         this.fullcalendar.getApi()?.addEvent(event);
//       });
//       this.fullcalendar.getApi()?.render();
//     }
//   }
  
//   ngOnInit() {
//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');

//     // Map tasks to FullCalendar events format
//     const events = tasks.flatMap((task: any) => {
//       if (task.frequency === 'hourly') {
//         const timeRange = `${task.startTime}-${task.endTime}`;
//         return [{
//           id: task.id, // Set the ID field
//           title: `${task.taskName} ${timeRange}`,
//           start: task.startDate,
//           end: task.endDate,
//           description: task.description,
//           extendedProps: {
//             status: task.status
//           }
//         }];
//       } else if (task.frequency === 'weekly' && task.selectedWeeklyData) {
//         const daysOfWeek = task.selectedWeeklyData.daysOfWeek.map((day: string) => {
//           return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].indexOf(day);
//         });

//         // Adjust end date to include the last day
//         const endDate = new Date(task.selectedWeeklyData.endDate);
//         endDate.setDate(endDate.getDate() + 1); // Include the last day

//         return [{
//           id: task.id, // Set the ID field
//           title: `${task.taskName} ${task.startTime}-${task.endTime}`,
//           daysOfWeek: daysOfWeek,
//           startRecur: task.selectedWeeklyData.startDate,
//           endRecur: endDate.toISOString().split('T')[0], // Convert to 'YYYY-MM-DD' format
//           description: task.description,
//           extendedProps: {
//             status: task.status
//           }
//         }];
//       } else if (task.frequency === 'daily') {
//         const recurringEvents = [];
//         let currentDate = new Date(task.startDate);
//         currentDate.setDate(currentDate.getDate() + 1); // Move to the next day
//         const endDate = new Date(); // Get current date
//         endDate.setDate(endDate.getDate() + 1460); // Limit to 1460 days (4 years) into the future
      
//         while (currentDate <= endDate) {
//           recurringEvents.push({
//             id: task.id, // Set the ID field
//             title: `${task.taskName} ${task.startTime}-${task.endTime}`,
//             start: currentDate.toISOString().split('T')[0], // Start date in 'YYYY-MM-DD' format
//             end: currentDate.toISOString().split('T')[0], // End date in 'YYYY-MM-DD' format
//             description: task.description,
//             extendedProps: {
//               status: task.status
//             }
//           });
//           currentDate.setDate(currentDate.getDate() + 1); // Move to the next day
//         }
      
//         return recurringEvents;
//       } else {
//         return [];
//       }
//     });

//     this.calendarOptions = {
//       plugins: [dayGridPlugin],
//       initialView: 'dayGridMonth',
//       events: events,
//       eventContent: this.customizeEventContent, // Custom event content callback
//       eventDidMount: this.customizeEventRender, // Custom event rendering callback
//       eventClick: this.onEventClick.bind(this)
//     };

//     this.service.taskDeleted$.subscribe((taskId: string) => {
//       // Update the calendar events when a task is deleted
//       if (this.calendarOptions.events) {
//         const filteredEvents = (this.calendarOptions.events as any[]).filter((event: any) => event.id !== taskId);
//         this.calendarOptions.events = filteredEvents as any; // Assign the filtered events back
//         if (this.fullcalendar) {
//           this.fullcalendar.getApi()?.removeAllEvents();
//           filteredEvents.forEach((event) => {
//             this.fullcalendar.getApi()?.addEvent(event);
//           });
//           this.fullcalendar.getApi()?.render();
//         }
//       }
//       this.loadAllTasks()
//     }); 

//   }

//   // Custom event content callback
//   customizeEventContent(arg: any) {
//     const eventEl = document.createElement('div');
//     eventEl.innerHTML = arg.event.title;
//     eventEl.style.fontSize = '10px'; // Adjust the font size as needed
//     eventEl.style.color = 'white';

//     return { domNodes: [eventEl] };
//   }

//   // Custom event rendering callback
//   customizeEventRender(info: any) {
//     const status = info.event.extendedProps.status;
//     if (status === 'null' || status === 'todo' || status === 'in-progress') {
//       info.el.style.backgroundColor = '#318CE7'; // Set background color
//     }
//   }

//   onEventClick(event: any) {
//     const taskId = event.event.id; // Assuming you're setting the ID in the event object
//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');
//     const task = tasks.find((t: any) => t.id === taskId);

//     if (task) {
//       const dialogRef = this.dialog.open(TaskdetailsdialogcomponentComponent, {
//         data: {
//           task: {
//             ...task,
//             extendedProps: {
//               ...task.extendedProps,
//               // Add the ID to the extendedProps
//             }
//           }
//         }
//       });

//       dialogRef.afterClosed().subscribe((result) => {
//         if (result && result.action === 'edit') {
//           this.router.navigate([`/main-view/edit-task/${task.id}`], { state: { task: result.task } });
//         }
//       });
//     } else {
//       console.error('Task not found for ID:', taskId);
//     }
//   }

// }





// Delete is working here

// import { Component, OnInit, ViewChild } from '@angular/core';
// import { FullCalendarComponent } from '@fullcalendar/angular';
// import { CalendarOptions } from '@fullcalendar/core';
// import dayGridPlugin from '@fullcalendar/daygrid';
// import { TaskdetailsdialogcomponentComponent } from 'src/app/dialogs/taskdetailsdialogcomponent/taskdetailsdialogcomponent.component';
// import { MatDialog } from '@angular/material/dialog';
// import { Router } from '@angular/router';
// import { CommonServiceService } from 'src/app/Services/common-service.service';

// @Component({
//   selector: 'app-list-all-tasks',
//   templateUrl: './list-all-tasks.component.html',
//   styleUrls: ['./list-all-tasks.component.scss']
// })
// export class ListAllTasksComponent implements OnInit {
//   @ViewChild('fullcalendar') fullcalendar!: FullCalendarComponent;
//   calendarOptions: CalendarOptions;

//   constructor(private dialog: MatDialog, private router: Router, private service: CommonServiceService) {
//     this.calendarOptions = {
//       plugins: [dayGridPlugin],
//       initialView: 'dayGridMonth',
//       events: [],
//       eventContent: this.customizeEventContent, // Custom event content callback
//       eventDidMount: this.customizeEventRender, // Custom event rendering callback
//       eventClick: this.onEventClick.bind(this)
//     };
//   }

//   loadAllTasks() {
//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');

//     // Map tasks to FullCalendar events format
//     const events = tasks.map((task: any) => {
//       let eventObj: any = {
//         id: task.id,
//         title: task.taskName,
//         start: task.startDate,
//         end: task.endDate,
//         description: task.description,
//         extendedProps: {
//           status: task.status
//         }
//       };

//       if (task.frequency === 'hourly') {
//         const timeRange = `${task.startTime}-${task.endTime}`;
//         eventObj.title = `${task.taskName} ${timeRange}`;
//       } else if (task.frequency === 'weekly' && task.selectedWeeklyData) {
//         const daysOfWeek = task.selectedWeeklyData.daysOfWeek.map((day: string) => {
//           return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].indexOf(day);
//         });

//         // Adjust end date to include the last day
//         const endDate = new Date(task.selectedWeeklyData.endDate);
//         endDate.setDate(endDate.getDate() + 1); // Include the last day

//         eventObj.title = `${task.taskName} ${task.startTime}-${task.endTime}`;
//         eventObj.daysOfWeek = daysOfWeek;
//         eventObj.startRecur = task.selectedWeeklyData.startDate;
//         eventObj.endRecur = endDate.toISOString().split('T')[0]; // Convert to 'YYYY-MM-DD' format
//       } else if (task.frequency === 'daily') {
//         const currentDate = new Date(task.startDate);
//         const endDate = new Date(task.endDate);
//         endDate.setDate(endDate.getDate() + 1); // Include the last day

//         const recurringEvents = [];
//         while (currentDate <= endDate) {
//           recurringEvents.push({
//             ...eventObj,
//             start: currentDate.toISOString().split('T')[0], // Start date in 'YYYY-MM-DD' format
//             end: currentDate.toISOString().split('T')[0], // End date in 'YYYY-MM-DD' format
//           });
//           currentDate.setDate(currentDate.getDate() + 1); // Move to the next day
//         }

//         return recurringEvents;
//       }

//       return eventObj;
//     }).flat(); // Flatten the array of arrays from daily recurring events

//     this.calendarOptions.events = events; // Update the calendar events
//     if (this.fullcalendar) {
//       this.fullcalendar.getApi()?.removeAllEvents();
//       events.forEach((event:any) => {
//         this.fullcalendar.getApi()?.addEvent(event);
//       });
//       this.fullcalendar.getApi()?.render();
//     }
//   }

//   ngOnInit() {
//     this.loadAllTasks();

//     this.service.taskDeleted$.subscribe((taskId: string) => {
//       // Update the calendar events when a task is deleted
//       if (this.calendarOptions.events) {
//         const filteredEvents = (this.calendarOptions.events as any[]).filter((event: any) => event.id !== taskId);
//         this.calendarOptions.events = filteredEvents as any; // Assign the filtered events back
//         if (this.fullcalendar) {
//           this.fullcalendar.getApi()?.removeAllEvents();
//           filteredEvents.forEach((event) => {
//             this.fullcalendar.getApi()?.addEvent(event);
//           });
//           this.fullcalendar.getApi()?.render();
//         }
//       }
//     });

//   }

//   // Custom event content callback
//   customizeEventContent(arg: any) {
//     const eventEl = document.createElement('div');
//     eventEl.innerHTML = arg.event.title;
//     eventEl.style.fontSize = '10px'; // Adjust the font size as needed
//     eventEl.style.color = 'white';

//     return { domNodes: [eventEl] };
//   }

//   // Custom event rendering callback
//   customizeEventRender(info: any) {
//     const status = info.event.extendedProps.status;
//     if (status === 'null' || status === 'todo' || status === 'in-progress') {
//       info.el.style.backgroundColor = '#318CE7'; // Set background color
//     }
//   }

//   onEventClick(event: any) {
//     const taskId = event.event.id; // Assuming you're setting the ID in the event object
//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');
//     const task = tasks.find((t: any) => t.id === taskId);

//     if (task) {
//       const dialogRef = this.dialog.open(TaskdetailsdialogcomponentComponent, {
//         data: {
//           task: {
//             ...task,
//             extendedProps: {
//               ...task.extendedProps,
//               // Add the ID to the extendedProps
//             }
//           }
//         }
//       });

//       dialogRef.afterClosed().subscribe((result) => {
//         if (result && result.action === 'edit') {
//           this.router.navigate([`/main-view/edit-task/${task.id}`], { state: { task: result.task } });
//         }
//       });
//     } else {
//       console.error('Task not found for ID:', taskId);
//     }
//   }

// }

















  
  // @ViewChild('fullcalendar') fullcalendar!: FullCalendarComponent;
  // calendarOptions: CalendarOptions;

  // constructor(private dialog: MatDialog, private router: Router, private service: CommonServiceService) {
  //   this.calendarOptions = {
  //     plugins: [dayGridPlugin],
  //     initialView: 'dayGridMonth',
  //     events: [],
  //     eventContent: this.customizeEventContent, // Custom event content callback
  //     eventDidMount: this.customizeEventRender, // Custom event rendering callback
  //     eventClick: this.onEventClick.bind(this)
  //   };
  // }

  // loadAllTasks() {
  //   const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');

  //   // Map tasks to FullCalendar events format
  //   const events = tasks.flatMap((task: any) => {
  //     let eventObj: any = {
  //       id: task.id,
  //       title: task.taskName,
  //       start: task.startDate,
  //       end: task.endDate,
  //       description: task.description,
  //       extendedProps: {
  //         status: task.status
  //       }
  //     };

  //     if (task.frequency === 'hourly') {
  //       const timeRange = `${task.startTime}-${task.endTime}`;
  //       eventObj.title = `${task.taskName} ${timeRange}`;
  //     } else if (task.frequency === 'weekly' && task.selectedWeeklyData) {
  //       const daysOfWeek = task.selectedWeeklyData.daysOfWeek.map((day: string) => {
  //         return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].indexOf(day);
  //       });

  //       // Adjust end date to include the last day
  //       const endDate = new Date(task.selectedWeeklyData.endDate);
  //       endDate.setDate(endDate.getDate() + 1); // Include the last day

  //       eventObj.title = `${task.taskName} ${task.startTime}-${task.endTime}`;
  //       eventObj.daysOfWeek = daysOfWeek;
  //       eventObj.startRecur = task.selectedWeeklyData.startDate;
  //       eventObj.endRecur = endDate.toISOString().split('T')[0]; // Convert to 'YYYY-MM-DD' format
  //     } else if (task.frequency === 'daily') {
  //       const timeRange = `${task.startTime}-${task.endTime}`;
  //       eventObj.title = `${task.taskName} ${timeRange}`;
  //       const recurringEvents = [];
        
  //       let startDate = new Date(task.startDate);
  //       startDate.setDate(startDate.getDate() + 1); // Start from the next day to avoid starting from the previous day
  //       startDate.setHours(0, 0, 0, 0); // Start from the beginning of the day in local time

  //       const endDate = new Date(); // Get current date
  //       endDate.setDate(endDate.getDate() + 1460); // Limit to 1460 days (4 years) into the future

  //       let currentDate = new Date(startDate);

  //       while (currentDate <= endDate) {
  //         recurringEvents.push({
  //           ...eventObj,
  //           start: currentDate.toISOString().split('T')[0], // Start date in 'YYYY-MM-DD' format
  //           end: currentDate.toISOString().split('T')[0], // End date in 'YYYY-MM-DD' format
  //         });
  //         currentDate.setDate(currentDate.getDate() + 1); // Move to the next day
  //       }
  //       return recurringEvents;
  //     }

  //     return eventObj;
  //   });

  //   this.calendarOptions.events = events; // Update the calendar events
  //   if (this.fullcalendar) {
  //     this.fullcalendar.getApi()?.removeAllEvents();
  //     events.forEach((event: any) => {
  //       this.fullcalendar.getApi()?.addEvent(event);
  //     });
  //     this.fullcalendar.getApi()?.render();
  //   }
  // }
  // ngOnInit() {
  //   this.loadAllTasks();
  // }
  // ngOnChanges(): void {
  //   //Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.
  //   //Add '${implements OnChanges}' to the class.
  //    this.service.taskDeleted$.subscribe((taskId: string) => {
  //     // Update the calendar events when a task is deleted
  //     if (this.calendarOptions.events) {
  //       const filteredEvents = (this.calendarOptions.events as any[]).filter((event: any) => event.id !== taskId);
  //       this.calendarOptions.events = filteredEvents as any; // Assign the filtered events back
  //       if (this.fullcalendar) {
  //         this.fullcalendar.getApi()?.removeAllEvents();
  //         filteredEvents.forEach((event) => {
  //           this.fullcalendar.getApi()?.addEvent(event);
  //         });
  //         this.fullcalendar.getApi()?.render();
  //       }
  //     }
  //    this.loadAllTasks()
  //   });
  // }


  // // Custom event content callback
  // customizeEventContent(arg: any) {
  //   const eventEl = document.createElement('div');
  //   eventEl.innerHTML = arg.event.title;
  //   eventEl.style.fontSize = '10px'; // Adjust the font size as needed
  //   eventEl.style.color = 'white';
  //   eventEl.style.background= "#318CE7"
  //   eventEl.style.width="100%"
  //   return { domNodes: [eventEl] };
  // }

 

  // // Custom event rendering callback
  // customizeEventRender(info: any) {
  //   const status = info.event.extendedProps.status;
  //   if (status === 'null' || status === 'todo' || status === 'in-progress') {
  //     info.el.style.backgroundColor = '#318CE7'; // Set background color
  //   }
  // }

  // onEventClick(event: any) {
  //   const taskId = event.event.id; // Assuming you're setting the ID in the event object
  //   const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');
  //   const task = tasks.find((t: any) => t.id === taskId);

  //   if (task) {
  //     const dialogRef = this.dialog.open(TaskdetailsdialogcomponentComponent, {
  //       data: {
  //         task: {
  //           ...task,
  //           extendedProps: {
  //             ...task.extendedProps,
  //             // Add the ID to the extendedProps
  //           }
  //         }
  //       }
  //     });

  //     dialogRef.afterClosed().subscribe((result) => {
  //       if (result && result.action === 'edit') {
  //         this.router.navigate([`/main-view/edit-task/${task.id}`], { state: { task: result.task } });
  //       }
  //     });
  //   } else {
  //     console.error('Task not found for ID:', taskId);
  //   }
  // }


